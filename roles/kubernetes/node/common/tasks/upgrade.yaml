---
- name: Upgrade kubeadm
  ansible.builtin.dnf:
    name:
      - "kubeadm-{{ k8s_version }}"
    state: present
    disable_excludes: kubernetes

- name: Upgrade cluster on first control plane node
  block:
    - name: Get upgrade plan
      ansible.builtin.shell: >
        {{ kubeadm }} upgrade plan
      changed_when: false
      register: kubeadm_upgrade_plan

    - name: Debug upgrade plan
      ansible.builtin.debug:
        var: kubeadm_upgrade_plan

    - name: Upgrade cluster with kubeadm
      ansible.builtin.shell: >
        {{ kubeadm }} upgrade apply --yes v{{ k8s_version }}
      changed_when: false
  when:
    - inventory_hostname == k8s_control_first_node
    - k8s_cluster_kubernetes_version != ''
    - k8s_cluster_kubernetes_version != k8s_version

- name: Upgrade cluster on secondary node
  ansible.builtin.shell: >
    {{ kubeadm }} upgrade node
  when:
    - inventory_hostname != k8s_control_first_node
    - k8s_cluster_node_version != ''
    - k8s_cluster_node_version != k8s_version

- name: Upgrade node
  block:
    - name: Drain node
      ansible.builtin.shell: >
        {{ kubectl }} drain {{ ansible_hostname }} --ignore-daemonsets
      changed_when: false
      delegate_to: "{{ k8s_control_first_node }}"

    - name: Upgrade kubelet
      ansible.builtin.dnf:
        name:
          - "kubelet-{{ k8s_version }}"
        state: present
        disable_excludes: kubernetes

    - name: Restart kubelet
      ansible.builtin.systemd:
        service: kubelet
        state: restarted
        daemon_reload: true

    - name: Upgrade kubectl
      ansible.builtin.dnf:
        name:
          - "kubectl-{{ k8s_version }}"
        state: present
        disable_excludes: kubernetes

    - name: Uncordon node
      ansible.builtin.shell: >
        {{ kubectl }} uncordon {{ ansible_hostname }}
      changed_when: false
      delegate_to: "{{ k8s_control_first_node }}"

  when:
    - k8s_cluster_node_version != ''
    - k8s_cluster_node_version != k8s_version
